/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
extern "C"
{
   #define AFB_BINDING_VERSION 2
   #include <afb/afb-binding.h>
};


#include <cstddef>
#include <cstdio>
#include <cstring>

#include <json-c/json.h>

#include <service/ServiceSensorInterface.h>
// #include <all_types.h>

static ServiceSensorInterface obj;

static int init()
{
	AFB_NOTICE("Initializing... ");
  // Do something
	AFB_NOTICE("Initialization done!");
	return 0;
}

static void setupsensor(struct afb_req request) {
  json_object *args = afb_req_json(request);
  json_object *val = NULL;
  int ret = 0;

  AFB_NOTICE("[sensorinterface] Calling setupsensor");

  if (args) {
      if (!json_object_object_get_ex(args, "param1", &val)) {
        AFB_ERROR("[sensorinterface] No 'param1' param provided");
        afb_req_fail(request, "bad-request", "No 'param1' param provided");
        return;
      }
      if (!json_object_object_get_ex(args, "param2", &val)) {
        AFB_ERROR("[sensorinterface] No 'param2' param provided");
        afb_req_fail(request, "bad-request", "No 'param2' param provided");
        return;
      }
  }

  ret = obj.setupsensor(json_object_object_get_ex(args, "param1", &val) ? json_object_get_int(val) : static_cast<int>(0),
      json_object_object_get_ex(args, "param2", &val) ? json_object_get_string(val) : static_cast<char *>(0));
  if (ret) {
    AFB_ERROR("[sensorinterface] Verb 'setupsensor' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'setupsensor' returning error %d", ret);
    return;
  }


  afb_req_success(request, args, NULL);

}

static void getdata(struct afb_req request) {
  json_object *args = afb_req_json(request);
  double _var_sensor_data = static_cast<double>(0);
  int _var_sensor_id = static_cast<int>(0);
  json_object * new_json = json_object_new_object();
  json_object * new_sub_json = NULL;
  int ret = 0;

  AFB_NOTICE("[sensorinterface] Calling getdata");

  ret = obj.getdata(_var_sensor_data,
      _var_sensor_id);
  if (ret) {
    AFB_ERROR("[sensorinterface] Verb 'getdata' returning error");
    afb_req_fail_f(request, "bad-request", "Verb 'getdata' returning error %d", ret);
    return;
  }

  new_sub_json = json_object_new_double(_var_sensor_data);
  json_object_object_add(new_json, "sensor_data", new_sub_json);
  new_sub_json = json_object_new_int(_var_sensor_id);
  json_object_object_add(new_json, "sensor_id", new_sub_json);

  afb_req_success(request, new_json, NULL);
  json_object_put(new_json);

}


// static const struct afb_auth _afb_auths_v2_monitor[] = {
// 	{type : afb_auth_Permission, text : "urn:AGL:permission:monitor:public:set"},
// 	{type : afb_auth_Permission, text : "urn:AGL:permission:monitor:public:get"},
// 	{type : afb_auth_Or, first : &_afb_auths_v2_monitor[1], next : &_afb_auths_v2_monitor[0]}
// };

static const struct afb_verb_v2 verbs[] = {
	/*Without security*/
	{.verb = "setupsensor", .callback = setupsensor, .auth = NULL, .info = "Setup", .session = 0},
	{.verb = "getdata", .callback = getdata, .auth = NULL, .info = "Get Data", .session = 0},
	{.verb= NULL, .callback=NULL, .auth = NULL, .info = NULL, .session = 0 }
};

const struct afb_binding_v2 afbBindingV2 = {
	.api = "sensorinterface",
	.specification = "",
  .info = "Auto generated - Sensor Interface",
	.verbs = verbs,
	.preinit = NULL,
	.init = init,
	.onevent = NULL,
	.noconcurrency = 1
};